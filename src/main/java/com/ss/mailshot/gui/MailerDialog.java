package com.ss.mailshot.gui;

import com.csvreader.CsvReader;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.ss.mailshot.data.datamodel.MailHost;
import com.ss.mailshot.data.datamodel.TemplateMetaData;
import com.ss.mailshot.gui.model.MapTableModel;
import com.ss.mailshot.logic.MailProcessor;
import com.ss.mailshot.service.MailServerService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.List;

public class MailerDialog extends JDialog {
    private final static Logger logger = Logger.getLogger(MailerDialog.class);
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JLabel templateNameLabel;
    private JButton openButton;
    private JTable dataTable;
    private JLabel fileNameLabel;
    private JComboBox mailServerComboBox;
    private JButton mailButton;
    private JLabel mailServerLabel;

    private TemplateMetaData template;
    private JFileChooser fileChooser;

    @Autowired(required = true)
    private MailServerService mailServerService;

    /**
     * Does the actual mail sending.
     */
    private MailProcessor mailProcessor;

    public MailerDialog() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent componentEvent) {
                List<MailHost> mailHosts = mailServerService.getMailServers();
                mailServerComboBox.setModel(new DefaultComboBoxModel(new Vector(mailHosts)));
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        openButton.addActionListener(new FillTableData());
        mailServerComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                JComboBox cb = (JComboBox) actionEvent.getSource();
                MailHost mailHost = (MailHost) cb.getSelectedItem();
                mailServerLabel.setText(mailHost.getName());
            }
        });
        mailButton.addActionListener(new MailProcessorActionListener());
    }


    private void onOK() {
// add your code here
        dispose();
    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        MailerDialog dialog = new MailerDialog();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    public void setTemplate(TemplateMetaData templateMetaData) {
        this.template = templateMetaData;
        templateNameLabel.setText(templateMetaData.getTemplateName());
    }

    public void setFileChooser(JFileChooser fileChooser) {
        this.fileChooser = fileChooser;
    }

    // TODO will create a way of listing and selecting different processors via the GUI.

    @Required
    public void setMailProcessor(MailProcessor mailProcessor) {
        this.mailProcessor = mailProcessor;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, BorderLayout.CENTER);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        dataTable = new JTable();
        dataTable.setAutoCreateRowSorter(true);
        dataTable.setAutoResizeMode(0);
        dataTable.setFillsViewportHeight(false);
        scrollPane1.setViewportView(dataTable);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 8, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, BorderLayout.SOUTH);
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        buttonOK.setMnemonic('O');
        buttonOK.setDisplayedMnemonicIndex(0);
        panel3.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Template:");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        templateNameLabel = new JLabel();
        templateNameLabel.setText("");
        panel2.add(templateNameLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("File Name:");
        panel2.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileNameLabel = new JLabel();
        fileNameLabel.setText("");
        panel2.add(fileNameLabel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Mail Server:");
        panel2.add(label3, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mailServerLabel = new JLabel();
        mailServerLabel.setText("");
        panel2.add(mailServerLabel, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JToolBar toolBar1 = new JToolBar();
        toolBar1.setFloatable(false);
        toolBar1.setOrientation(0);
        toolBar1.setRollover(true);
        toolBar1.putClientProperty("JToolBar.isRollover", Boolean.TRUE);
        contentPane.add(toolBar1, BorderLayout.NORTH);
        openButton = new JButton();
        openButton.setText("Open");
        toolBar1.add(openButton);
        mailServerComboBox = new JComboBox();
        toolBar1.add(mailServerComboBox);
        mailButton = new JButton();
        mailButton.setText("Mail");
        toolBar1.add(mailButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private class FillTableData implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            int returnVal = fileChooser.showOpenDialog(MailerDialog.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                fileNameLabel.setText(selectedFile.getAbsolutePath());

                try {
                    CsvReader csvReader = new CsvReader(new FileReader(selectedFile));
                    csvReader.readHeaders();
                    String[] headers = csvReader.getHeaders();
                    List<Map<String, String>> rows = new ArrayList<Map<String, String>>();

                    while (csvReader.readRecord()) {
                        Map<String, String> map = populateRecordInMap(csvReader, headers);
                        rows.add(map);
                    }

                    dataTable.setModel(new MapTableModel(rows, headers));
                } catch (IOException e) {
                    logger.error("Error occurred with file: " + selectedFile, e);
                }
            }
        }

        private Map<String, String> populateRecordInMap(CsvReader csvReader, String[] headers) throws IOException {
            Map<String, String> map = new HashMap<String, String>();
            for (String header : headers) {
                String value = csvReader.get(header);
                map.put(header, value);
            }
            return map;
        }

    }

    private class MailProcessorActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            String message = null;

            // if nothing is selected popup a joption message.
            if (dataTable.getSelectedRowCount() > 0) {
                MailHost mailHost = (MailHost) mailServerComboBox.getSelectedItem();
                if (mailHost != null) {
                    if (template != null) {

                        // get the rows of data.
                        int[] selectedRows = dataTable.getSelectedRows();
                        List<Map<String, String>> map = ((MapTableModel) dataTable.getModel()).getRowsMap();

                        List<Map<String, String>> selectedRowsList = new ArrayList<Map<String, String>>();

                        for (int selectedRow : selectedRows) {
                            selectedRowsList.add(map.get(selectedRow));
                        }

                        boolean success = mailProcessor.processor(template, selectedRowsList, mailHost);
                        message = success ? "Sent: " + selectedRowsList.size() : " Failed to send see logs.";

                        // highlight rows.
                        if (success) {
                            //dataTable.set
                        }
                    } else {
                        message = "Please select a template!";
                    }
                } else {
                    message = "Please select a mail host!";
                }
            } else {
                message = "Please select a row to send!";
            }

            if (message != null) {
                JOptionPane.showMessageDialog(MailerDialog.this, message, "Message", JOptionPane.OK_OPTION);
            }

        }
    }
}
